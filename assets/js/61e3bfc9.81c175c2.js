"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8604],{2135:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/react-fast-hooks/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"hooks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"useBattery","href":"/react-fast-hooks/docs/hooks/useBattery","docId":"hooks/useBattery","unlisted":false},{"type":"link","label":"useClickOutside","href":"/react-fast-hooks/docs/hooks/useClickOutside","docId":"hooks/useClickOutside","unlisted":false},{"type":"link","label":"useClipboard","href":"/react-fast-hooks/docs/hooks/useClipboard","docId":"hooks/useClipboard","unlisted":false},{"type":"link","label":"useCookie","href":"/react-fast-hooks/docs/hooks/useCookie","docId":"hooks/useCookie","unlisted":false},{"type":"link","label":"useDebounce","href":"/react-fast-hooks/docs/hooks/useDebounce","docId":"hooks/useDebounce","unlisted":false},{"type":"link","label":"useDebouncedCallback","href":"/react-fast-hooks/docs/hooks/useDebouncedCallback","docId":"hooks/useDebouncedCallback","unlisted":false},{"type":"link","label":"useDeviceOrientation","href":"/react-fast-hooks/docs/hooks/useDeviceOrientation","docId":"hooks/useDeviceOrientation","unlisted":false},{"type":"link","label":"useDimensions","href":"/react-fast-hooks/docs/hooks/useDimensions","docId":"hooks/useDimensions","unlisted":false},{"type":"link","label":"useEventListener","href":"/react-fast-hooks/docs/hooks/useEventListener","docId":"hooks/useEventListener","unlisted":false},{"type":"link","label":"useFavicon","href":"/react-fast-hooks/docs/hooks/useFavicon","docId":"hooks/useFavicon","unlisted":false},{"type":"link","label":"useFetch","href":"/react-fast-hooks/docs/hooks/useFetch","docId":"hooks/useFetch","unlisted":false},{"type":"link","label":"useFocusBlur","href":"/react-fast-hooks/docs/hooks/useFocusBlur","docId":"hooks/useFocusBlur","unlisted":false},{"type":"link","label":"useGeolocation","href":"/react-fast-hooks/docs/hooks/useGeolocation","docId":"hooks/useGeolocation","unlisted":false},{"type":"link","label":"useHistory","href":"/react-fast-hooks/docs/hooks/useHistory","docId":"hooks/useHistory","unlisted":false},{"type":"link","label":"useHover","href":"/react-fast-hooks/docs/hooks/useHover","docId":"hooks/useHover","unlisted":false},{"type":"link","label":"useIdle","href":"/react-fast-hooks/docs/hooks/useIdle","docId":"hooks/useIdle","unlisted":false},{"type":"link","label":"useIntersectionObserver","href":"/react-fast-hooks/docs/hooks/useIntersectionObserver","docId":"hooks/useIntersectionObserver","unlisted":false},{"type":"link","label":"useKeyCombo","href":"/react-fast-hooks/docs/hooks/useKeyCombo","docId":"hooks/useKeyCombo","unlisted":false},{"type":"link","label":"useKeyPress","href":"/react-fast-hooks/docs/hooks/useKeyPress","docId":"hooks/useKeyPress","unlisted":false},{"type":"link","label":"useLocalStorage","href":"/react-fast-hooks/docs/hooks/useLocalStorage","docId":"hooks/useLocalStorage","unlisted":false},{"type":"link","label":"useLongPress","href":"/react-fast-hooks/docs/hooks/useLongPress","docId":"hooks/useLongPress","unlisted":false},{"type":"link","label":"useMediaQuery","href":"/react-fast-hooks/docs/hooks/useMediaQuery","docId":"hooks/useMediaQuery","unlisted":false},{"type":"link","label":"useMouse","href":"/react-fast-hooks/docs/hooks/useMouse","docId":"hooks/useMouse","unlisted":false},{"type":"link","label":"useMutationObserver","href":"/react-fast-hooks/docs/hooks/useMutationObserver","docId":"hooks/useMutationObserver","unlisted":false},{"type":"link","label":"useNotification","href":"/react-fast-hooks/docs/hooks/useNotification","docId":"hooks/useNotification","unlisted":false},{"type":"link","label":"useOnlineStatus","href":"/react-fast-hooks/docs/hooks/useOnlineStatus","docId":"hooks/useOnlineStatus","unlisted":false},{"type":"link","label":"usePreferredLanguage","href":"/react-fast-hooks/docs/hooks/usePreferredLanguage","docId":"hooks/usePreferredLanguage","unlisted":false},{"type":"link","label":"usePrevious","href":"/react-fast-hooks/docs/hooks/usePrevious","docId":"hooks/usePrevious","unlisted":false},{"type":"link","label":"useRandomColor","href":"/react-fast-hooks/docs/hooks/useRandomColor","docId":"hooks/useRandomColor","unlisted":false},{"type":"link","label":"useScript","href":"/react-fast-hooks/docs/hooks/useScript","docId":"hooks/useScript","unlisted":false},{"type":"link","label":"useScrollIntoPosition","href":"/react-fast-hooks/docs/hooks/useScrollIntoPosition","docId":"hooks/useScrollIntoPosition","unlisted":false},{"type":"link","label":"useScrollLock","href":"/react-fast-hooks/docs/hooks/useScrollLock","docId":"hooks/useScrollLock","unlisted":false},{"type":"link","label":"useScrollPosition","href":"/react-fast-hooks/docs/hooks/useScrollPosition","docId":"hooks/useScrollPosition","unlisted":false},{"type":"link","label":"useSessionStorage","href":"/react-fast-hooks/docs/hooks/useSessionStorage","docId":"hooks/useSessionStorage","unlisted":false},{"type":"link","label":"useSound","href":"/react-fast-hooks/docs/hooks/useSound","docId":"hooks/useSound","unlisted":false},{"type":"link","label":"useStopwatch","href":"/react-fast-hooks/docs/hooks/useStopwatch","docId":"hooks/useStopwatch","unlisted":false},{"type":"link","label":"useSystemTheme","href":"/react-fast-hooks/docs/hooks/useSystemTheme","docId":"hooks/useSystemTheme","unlisted":false},{"type":"link","label":"useTitle","href":"/react-fast-hooks/docs/hooks/useTitle","docId":"hooks/useTitle","unlisted":false},{"type":"link","label":"useTouch","href":"/react-fast-hooks/docs/hooks/useTouch","docId":"hooks/useTouch","unlisted":false},{"type":"link","label":"useTouchSwipe","href":"/react-fast-hooks/docs/hooks/useTouchSwipe","docId":"hooks/useTouchSwipe","unlisted":false},{"type":"link","label":"useUpdateEffect","href":"/react-fast-hooks/docs/hooks/useUpdateEffect","docId":"hooks/useUpdateEffect","unlisted":false},{"type":"link","label":"useVibration","href":"/react-fast-hooks/docs/hooks/useVibration","docId":"hooks/useVibration","unlisted":false},{"type":"link","label":"useWindowFocus","href":"/react-fast-hooks/docs/hooks/useWindowFocus","docId":"hooks/useWindowFocus","unlisted":false},{"type":"link","label":"useWindowScrollIntoPosition","href":"/react-fast-hooks/docs/hooks/useWindowScrollIntoPosition","docId":"hooks/useWindowScrollIntoPosition","unlisted":false},{"type":"link","label":"useWindowScrollPosition","href":"/react-fast-hooks/docs/hooks/useWindowScrollPosition","docId":"hooks/useWindowScrollPosition","unlisted":false},{"type":"link","label":"useWindowSize","href":"/react-fast-hooks/docs/hooks/useWindowSize","docId":"hooks/useWindowSize","unlisted":false},{"type":"link","label":"useWindowTouchSwipe","href":"/react-fast-hooks/docs/hooks/useWindowTouchSwipe","docId":"hooks/useWindowTouchSwipe","unlisted":false}]}]},"docs":{"hooks/useBattery":{"id":"hooks/useBattery","title":"useBattery","description":"Hook to get the current battery status of the device.","sidebar":"docsSidebar"},"hooks/useClickOutside":{"id":"hooks/useClickOutside","title":"useClickOutside","description":"Hook to detect clicks outside of a specified element.","sidebar":"docsSidebar"},"hooks/useClipboard":{"id":"hooks/useClipboard","title":"useClipboard","description":"Hook to copy text to the clipboard.","sidebar":"docsSidebar"},"hooks/useCookie":{"id":"hooks/useCookie","title":"useCookie","description":"Hook to manage browser cookies.","sidebar":"docsSidebar"},"hooks/useDebounce":{"id":"hooks/useDebounce","title":"useDebounce","description":"Hook to debounce a value.","sidebar":"docsSidebar"},"hooks/useDebouncedCallback":{"id":"hooks/useDebouncedCallback","title":"useDebouncedCallback","description":"Hook to create a debounced version of a callback function.","sidebar":"docsSidebar"},"hooks/useDeviceOrientation":{"id":"hooks/useDeviceOrientation","title":"useDeviceOrientation","description":"Hook to get the current orientation of the device.","sidebar":"docsSidebar"},"hooks/useDimensions":{"id":"hooks/useDimensions","title":"useDimensions","description":"Hook to get the dimensions (width and height) of a specified element.","sidebar":"docsSidebar"},"hooks/useEventListener":{"id":"hooks/useEventListener","title":"useEventListener","description":"Hook to attach an event listener to a DOM element and clean it up on unmount.","sidebar":"docsSidebar"},"hooks/useFavicon":{"id":"hooks/useFavicon","title":"useFavicon","description":"Hook to set and update the favicon of the webpage.","sidebar":"docsSidebar"},"hooks/useFetch":{"id":"hooks/useFetch","title":"useFetch","description":"Fetch data from an API endpoint with the useFetch hook.","sidebar":"docsSidebar"},"hooks/useFocusBlur":{"id":"hooks/useFocusBlur","title":"useFocusBlur","description":"Hook to get focus and blur functions for an element.","sidebar":"docsSidebar"},"hooks/useGeolocation":{"id":"hooks/useGeolocation","title":"useGeolocation","description":"Hook to get the current geolocation.","sidebar":"docsSidebar"},"hooks/useHistory":{"id":"hooks/useHistory","title":"useHistory","description":"Hook to manage browser history.","sidebar":"docsSidebar"},"hooks/useHover":{"id":"hooks/useHover","title":"useHover","description":"Hook to determine if an element is hovered.","sidebar":"docsSidebar"},"hooks/useIdle":{"id":"hooks/useIdle","title":"useIdle","description":"Hook to detect user inactivity.","sidebar":"docsSidebar"},"hooks/useIntersectionObserver":{"id":"hooks/useIntersectionObserver","title":"useIntersectionObserver","description":"Hook to observe the visibility of an element using the Intersection Observer API.","sidebar":"docsSidebar"},"hooks/useKeyCombo":{"id":"hooks/useKeyCombo","title":"useKeyCombo","description":"Hook to detect if a specified key combination is pressed.","sidebar":"docsSidebar"},"hooks/useKeyPress":{"id":"hooks/useKeyPress","title":"useKeyPress","description":"Hook to detect if a specified key is pressed.","sidebar":"docsSidebar"},"hooks/useLocalStorage":{"id":"hooks/useLocalStorage","title":"useLocalStorage","description":"Hook to manage a value that syncs with localStorage.","sidebar":"docsSidebar"},"hooks/useLongPress":{"id":"hooks/useLongPress","title":"useLongPress","description":"Enable precise control of long-press interactions for both touch and mouse events with useLongPress.","sidebar":"docsSidebar"},"hooks/useMediaQuery":{"id":"hooks/useMediaQuery","title":"useMediaQuery","description":"Hook to detect media query matches.","sidebar":"docsSidebar"},"hooks/useMouse":{"id":"hooks/useMouse","title":"useMouse","description":"Hook to track the mouse position relative to a specified element.","sidebar":"docsSidebar"},"hooks/useMutationObserver":{"id":"hooks/useMutationObserver","title":"useMutationObserver","description":"Hook to observe changes to a DOM element using MutationObserver.","sidebar":"docsSidebar"},"hooks/useNotification":{"id":"hooks/useNotification","title":"useNotification","description":"Hook to trigger browser notifications.","sidebar":"docsSidebar"},"hooks/useOnlineStatus":{"id":"hooks/useOnlineStatus","title":"useOnlineStatus","description":"Hook to get the online status of the browser.","sidebar":"docsSidebar"},"hooks/usePreferredLanguage":{"id":"hooks/usePreferredLanguage","title":"usePreferredLanguage","description":"Hook to get the user\'s preferred language from the browser.","sidebar":"docsSidebar"},"hooks/usePrevious":{"id":"hooks/usePrevious","title":"usePrevious","description":"Hook to get the previous value of a state or prop.","sidebar":"docsSidebar"},"hooks/useRandomColor":{"id":"hooks/useRandomColor","title":"useRandomColor","description":"Hook to generate a random color.","sidebar":"docsSidebar"},"hooks/useScript":{"id":"hooks/useScript","title":"useScript","description":"Hook to dynamically load an external script.","sidebar":"docsSidebar"},"hooks/useScrollIntoPosition":{"id":"hooks/useScrollIntoPosition","title":"useScrollIntoPosition","description":"Hook to scroll an element to a specific position.","sidebar":"docsSidebar"},"hooks/useScrollLock":{"id":"hooks/useScrollLock","title":"useScrollLock","description":"Hook to lock and unlock scrolling on the body element with an extra layer of security using MutationObserver.","sidebar":"docsSidebar"},"hooks/useScrollPosition":{"id":"hooks/useScrollPosition","title":"useScrollPosition","description":"Hook to get the current scroll position of a specified element.","sidebar":"docsSidebar"},"hooks/useSessionStorage":{"id":"hooks/useSessionStorage","title":"useSessionStorage","description":"Hook to manage a value that syncs with sessionStorage.","sidebar":"docsSidebar"},"hooks/useSound":{"id":"hooks/useSound","title":"useSound","description":"Hook to play and manage sound effects.","sidebar":"docsSidebar"},"hooks/useStopwatch":{"id":"hooks/useStopwatch","title":"useStopwatch","description":"Hook to provide stopwatch functionality with SSR compatibility.","sidebar":"docsSidebar"},"hooks/useSystemTheme":{"id":"hooks/useSystemTheme","title":"useSystemTheme","description":"Hook to get the current system theme.","sidebar":"docsSidebar"},"hooks/useTitle":{"id":"hooks/useTitle","title":"useTitle","description":"Hook to set and get the document title.","sidebar":"docsSidebar"},"hooks/useTouch":{"id":"hooks/useTouch","title":"useTouch","description":"Hook to track touch events on a specified element.","sidebar":"docsSidebar"},"hooks/useTouchSwipe":{"id":"hooks/useTouchSwipe","title":"useTouchSwipe","description":"Hook to detect touch swipe gestures on a specified element.","sidebar":"docsSidebar"},"hooks/useUpdateEffect":{"id":"hooks/useUpdateEffect","title":"useUpdateEffect","description":"Hook that runs an effect only when the component updates, skipping the initial render.","sidebar":"docsSidebar"},"hooks/useVibration":{"id":"hooks/useVibration","title":"useVibration","description":"Hook to manage vibration on supported devices.","sidebar":"docsSidebar"},"hooks/useWindowFocus":{"id":"hooks/useWindowFocus","title":"useWindowFocus","description":"Hook to track the focus state of the window.","sidebar":"docsSidebar"},"hooks/useWindowScrollIntoPosition":{"id":"hooks/useWindowScrollIntoPosition","title":"useWindowScrollIntoPosition","description":"Hook to scroll the window to a specific position.","sidebar":"docsSidebar"},"hooks/useWindowScrollPosition":{"id":"hooks/useWindowScrollPosition","title":"useWindowScrollPosition","description":"Hook to get the current scroll position of the window.","sidebar":"docsSidebar"},"hooks/useWindowSize":{"id":"hooks/useWindowSize","title":"useWindowSize","description":"Hook to get the current window size.","sidebar":"docsSidebar"},"hooks/useWindowTouchSwipe":{"id":"hooks/useWindowTouchSwipe","title":"useWindowTouchSwipe","description":"Hook to detect touch swipe gestures.","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"React Fast Hooks is a library that provides a set of hooks that are optimized for performance. The hooks are designed to be as fast as possible and to minimize the number of re-renders.","sidebar":"docsSidebar"}}}}')}}]);